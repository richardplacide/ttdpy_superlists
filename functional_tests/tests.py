from django.test import LiveServerTestCasefrom selenium import webdriverfrom selenium.webdriver.common.keys import Keysimport unittestclass NewVisitorTest(LiveServerTestCase):    def setUp(self):        self.browser = webdriver.Firefox()        self.browser.implicitly_wait(3)    def tearDown(self):        self.browser.quit()    #helper function    def check_for_row_in_list_table(self, row_text):        table = self.browser.find_element_by_id('id_list_table')        rows = table.find_elements_by_tag_name('tr')        self.assertIn(row_text, [row.text for row in rows])    def test_can_start_a_list_and_retrieve_it_later(self):        self.browser.get(self.live_server_url)        self.assertIn('To-Do', self.browser.title)        header_text = self.browser.find_element_by_tag_name('h1').text        self.assertIn('To-Do', header_text)        inputbox = self.browser.find_element_by_id('id_new_item')        self.assertEqual(inputbox.get_attribute('placeholder'), 'Enter a to-do item')        # User adds "Buy pirate hat" as a new item        inputbox.send_keys('Buy pirate hat')        # User hits enter and is taken to a new URL,        # the page lists "1: Buy pirate hat" as an item in a to-do list table        inputbox.send_keys(Keys.ENTER)        user1_list_url = self.browser.current_url        self.assertRegex(user1_list_url, '/lists/.+')        self.check_for_row_in_list_table('1: Buy pirate hat')        # User adds "Find a good old sword"        inputbox = self.browser.find_element_by_id('id_new_item')        inputbox.send_keys('Find a good old sword')        inputbox.send_keys(Keys.ENTER)        # The page updates again, and now shows both items on her list        self.check_for_row_in_list_table('1: Buy pirate hat')        self.check_for_row_in_list_table('2: Find a good old sword')        # Now a new user, U2, comes along to the site.        self.browser.quit()        # We use a new browser session to make sure that no information U1 is coming through from cookies etc        self.browser = webdriver.Firefox()        # U2 visits the home page. There is no sign of U1's list        self.browser.get(self.live_server_url)        page_text = self.browser.find_element_by_tag_name('body').text        self.assertNotIn('Buy pirate hat', page_text)        self.assertNotIn('Find a good old sword', page_text)        # U2 starts a new list by entering a new item.        inputbox = self.browser.find_element_by_id('id_new_item')        inputbox.send_keys('Buy milk')        inputbox.send_keys(Keys.ENTER)        # U2 gets his own unique URL        user2_list_url = self.browser.current_url        self.assertRegex(user2_list_url, '/lists/.+')        self.assertNotEqual(user2_list_url, user1_list_url)        # Again, there is no trace of User1's list        page_text = self.browser.find_element_by_tag_name('body').text        self.assertNotIn('Buy pirate hat', page_text)        self.assertIn('Buy milk', page_text)